/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardUsersRouteImport } from './routes/dashboard/users'
import { Route as DashboardRoomsRouteImport } from './routes/dashboard/rooms'
import { Route as DashboardProfileRouteImport } from './routes/dashboard/profile'
import { Route as DashboardFeedbacksRouteImport } from './routes/dashboard/feedbacks'
import { Route as DashboardCoursesRouteImport } from './routes/dashboard/courses'
import { Route as DashboardComplaintsRouteImport } from './routes/dashboard/complaints'
import { Route as DashboardAdminsRouteImport } from './routes/dashboard/admins'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUsersRoute = DashboardUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardRoomsRoute = DashboardRoomsRouteImport.update({
  id: '/rooms',
  path: '/rooms',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardProfileRoute = DashboardProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardFeedbacksRoute = DashboardFeedbacksRouteImport.update({
  id: '/feedbacks',
  path: '/feedbacks',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardCoursesRoute = DashboardCoursesRouteImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardComplaintsRoute = DashboardComplaintsRouteImport.update({
  id: '/complaints',
  path: '/complaints',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAdminsRoute = DashboardAdminsRouteImport.update({
  id: '/admins',
  path: '/admins',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/signup': typeof SignupRoute
  '/dashboard/admins': typeof DashboardAdminsRoute
  '/dashboard/complaints': typeof DashboardComplaintsRoute
  '/dashboard/courses': typeof DashboardCoursesRoute
  '/dashboard/feedbacks': typeof DashboardFeedbacksRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/rooms': typeof DashboardRoomsRoute
  '/dashboard/users': typeof DashboardUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/signup': typeof SignupRoute
  '/dashboard/admins': typeof DashboardAdminsRoute
  '/dashboard/complaints': typeof DashboardComplaintsRoute
  '/dashboard/courses': typeof DashboardCoursesRoute
  '/dashboard/feedbacks': typeof DashboardFeedbacksRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/rooms': typeof DashboardRoomsRoute
  '/dashboard/users': typeof DashboardUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/signup': typeof SignupRoute
  '/dashboard/admins': typeof DashboardAdminsRoute
  '/dashboard/complaints': typeof DashboardComplaintsRoute
  '/dashboard/courses': typeof DashboardCoursesRoute
  '/dashboard/feedbacks': typeof DashboardFeedbacksRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/rooms': typeof DashboardRoomsRoute
  '/dashboard/users': typeof DashboardUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/signup'
    | '/dashboard/admins'
    | '/dashboard/complaints'
    | '/dashboard/courses'
    | '/dashboard/feedbacks'
    | '/dashboard/profile'
    | '/dashboard/rooms'
    | '/dashboard/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/signup'
    | '/dashboard/admins'
    | '/dashboard/complaints'
    | '/dashboard/courses'
    | '/dashboard/feedbacks'
    | '/dashboard/profile'
    | '/dashboard/rooms'
    | '/dashboard/users'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/signup'
    | '/dashboard/admins'
    | '/dashboard/complaints'
    | '/dashboard/courses'
    | '/dashboard/feedbacks'
    | '/dashboard/profile'
    | '/dashboard/rooms'
    | '/dashboard/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/rooms': {
      id: '/dashboard/rooms'
      path: '/rooms'
      fullPath: '/dashboard/rooms'
      preLoaderRoute: typeof DashboardRoomsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/profile': {
      id: '/dashboard/profile'
      path: '/profile'
      fullPath: '/dashboard/profile'
      preLoaderRoute: typeof DashboardProfileRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/feedbacks': {
      id: '/dashboard/feedbacks'
      path: '/feedbacks'
      fullPath: '/dashboard/feedbacks'
      preLoaderRoute: typeof DashboardFeedbacksRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/courses': {
      id: '/dashboard/courses'
      path: '/courses'
      fullPath: '/dashboard/courses'
      preLoaderRoute: typeof DashboardCoursesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/complaints': {
      id: '/dashboard/complaints'
      path: '/complaints'
      fullPath: '/dashboard/complaints'
      preLoaderRoute: typeof DashboardComplaintsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/admins': {
      id: '/dashboard/admins'
      path: '/admins'
      fullPath: '/dashboard/admins'
      preLoaderRoute: typeof DashboardAdminsRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardAdminsRoute: typeof DashboardAdminsRoute
  DashboardComplaintsRoute: typeof DashboardComplaintsRoute
  DashboardCoursesRoute: typeof DashboardCoursesRoute
  DashboardFeedbacksRoute: typeof DashboardFeedbacksRoute
  DashboardProfileRoute: typeof DashboardProfileRoute
  DashboardRoomsRoute: typeof DashboardRoomsRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAdminsRoute: DashboardAdminsRoute,
  DashboardComplaintsRoute: DashboardComplaintsRoute,
  DashboardCoursesRoute: DashboardCoursesRoute,
  DashboardFeedbacksRoute: DashboardFeedbacksRoute,
  DashboardProfileRoute: DashboardProfileRoute,
  DashboardRoomsRoute: DashboardRoomsRoute,
  DashboardUsersRoute: DashboardUsersRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
